const Database = require('better-sqlite3');
const path = require('path');

try {
  // Usar o banco de dados correto que foi identificado
  const dbPath = path.join(__dirname, 'database.sqlite');
  console.log(`üîç Acessando banco: ${dbPath}`);
  
  const db = new Database(dbPath);
  
  console.log('üîç INVESTIGA√á√ÉO FINAL - Consulta SQL Direta');
  console.log('='.repeat(50));
  
  // ID do log de erro fornecido pelo usu√°rio
  const targetId = '3c26b970-4c26-4d26-8b6b-4b65269f9171';
  console.log(`üìã Buscando usu√°rio com ID: ${targetId}`);
  
  // Verificar tabelas dispon√≠veis
  console.log('\nüìä Tabelas dispon√≠veis no banco:');
  const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();
  console.table(tables);
  
  // Consulta na tabela users
  console.log('\nüîé Consulta SQL Direta na tabela "users":');
  console.log(`SELECT id, name, email, status, cell_id FROM users WHERE id = '${targetId}';`);
  
  try {
    const userQuery = db.prepare('SELECT id, name, email, status, cell_id FROM users WHERE id = ?');
    const user = userQuery.get(targetId);
    
    if (user) {
      console.log('\n‚úÖ RESULTADO - USU√ÅRIO ENCONTRADO:');
      console.table([user]);
      
      // Analisar o status
      if (user.status === 'ACTIVE') {
        console.log('‚úÖ Status: ATIVO - Usu√°rio est√° ativo no sistema');
        console.log('‚ùì O problema pode estar na l√≥gica do backend ou autentica√ß√£o');
      } else if (user.status === 'INACTIVE') {
        console.log('‚ùå Status: INATIVO - ESTE √â O PROBLEMA!');
        console.log('\nüîß SOLU√á√ÉO ENCONTRADA:');
        console.log('Execute o seguinte comando SQL para reativar o usu√°rio:');
        console.log(`UPDATE users SET status = 'ACTIVE' WHERE id = '${targetId}';`);
        
        // Executar a corre√ß√£o automaticamente
        console.log('\nüîß Executando corre√ß√£o automaticamente...');
        const updateQuery = db.prepare('UPDATE users SET status = ? WHERE id = ?');
        const result = updateQuery.run('ACTIVE', targetId);
        
        if (result.changes > 0) {
          console.log('‚úÖ Usu√°rio reativado com sucesso!');
          
          // Verificar o resultado
          const updatedUser = userQuery.get(targetId);
          console.log('\nüìã Status ap√≥s corre√ß√£o:');
          console.table([updatedUser]);
        } else {
          console.log('‚ùå Falha ao reativar usu√°rio');
        }
      }
      
    } else {
      console.log('\n‚ùå RESULTADO - USU√ÅRIO N√ÉO ENCONTRADO');
      console.log('O ID fornecido n√£o existe no banco de dados.');
      
      // Buscar usu√°rios similares
      console.log('\nüîç Buscando usu√°rios "Lucas" para compara√ß√£o:');
      const lucasQuery = db.prepare('SELECT id, name, email, status, cell_id FROM users WHERE name LIKE ?');
      const lucasUsers = lucasQuery.all('%Lucas%');
      
      if (lucasUsers.length > 0) {
        console.log('üë• Usu√°rios "Lucas" encontrados:');
        console.table(lucasUsers);
        console.log('\nüí° POSS√çVEL SOLU√á√ÉO: Use um dos IDs acima no frontend');
      } else {
        console.log('‚ùå Nenhum usu√°rio "Lucas" encontrado no banco');
      }
    }
    
  } catch (error) {
    console.log('‚ùå Erro na consulta:', error.message);
  }
  
  // Estat√≠sticas gerais
  console.log('\nüìà Estat√≠sticas do banco:');
  try {
    const totalUsers = db.prepare('SELECT COUNT(*) as count FROM users').get();
    const activeUsers = db.prepare('SELECT COUNT(*) as count FROM users WHERE status = ?').get('ACTIVE');
    const inactiveUsers = db.prepare('SELECT COUNT(*) as count FROM users WHERE status = ?').get('INACTIVE');
    
    console.log(`Total de usu√°rios: ${totalUsers.count}`);
    console.log(`Usu√°rios ativos: ${activeUsers.count}`);
    console.log(`Usu√°rios inativos: ${inactiveUsers.count}`);
  } catch (error) {
    console.log('‚ùå Erro ao obter estat√≠sticas:', error.message);
  }
  
  db.close();
  console.log('\n‚úÖ Investiga√ß√£o conclu√≠da');
  
} catch (error) {
  console.error('‚ùå Erro geral:', error);
}